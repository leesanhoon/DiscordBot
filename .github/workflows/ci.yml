name: CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        environment: production
        runs-on: ubuntu-latest
        steps:
            # Checkout code v·ªõi full history n·∫øu c·∫ßn
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # L·∫•y full history ƒë·ªÉ t·∫°o version t·ª´ git tag n·∫øu c·∫ßn

            # Cache Docker layers ƒë·ªÉ tƒÉng t·ªëc build
            - name: Cache Docker layers
              uses: actions/cache@v3
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            # Thi·∫øt l·∫≠p Buildx ƒë·ªÉ build nhanh h∆°n v√† h·ªó tr·ª£ multi-platform
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            # ƒêƒÉng nh·∫≠p Docker Hub tr∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói auth gi·ªØa ch·ª´ng
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_HUB_USERNAME }}
                  password: ${{ secrets.DOCKER_HUB_TOKEN }}

            # Thi·∫øt l·∫≠p Node.js v·ªõi cache
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "npm"
                  cache-dependency-path: package-lock.json # ƒê·∫£m b·∫£o cache ch√≠nh x√°c

            # C√†i dependencies v·ªõi ki·ªÉm tra l·ªói
            - name: Install dependencies
              run: npm ci --prefer-offline --no-audit
              # --prefer-offline: D√πng cache n·∫øu c√≥
              # --no-audit: B·ªè qua audit ƒë·ªÉ nhanh h∆°n

            # Build v√† push Docker image v·ªõi cache v√† tag versioning
            - name: Build and Push Docker image
              id: docker_build
              run: |
                  # L·∫•y git tag ho·∫∑c commit sha l√†m version
                  VERSION=$(git describe --tags --always --dirty || echo "latest")
                  IMAGE_NAME="${{ secrets.DOCKER_HUB_USERNAME }}/discordbot"
                  docker buildx build \
                    --cache-from type=local,src=/tmp/.buildx-cache \
                    --cache-to type=local,dest=/tmp/.buildx-cache \
                    --tag "${IMAGE_NAME}:${VERSION}" \
                    --tag "${IMAGE_NAME}:latest" \
                    --output type=registry \
                    --push \
                    .
              env:
                  DOCKER_BUILDKIT: 1 # B·∫≠t BuildKit ƒë·ªÉ build nhanh h∆°n

            # Ki·ªÉm tra k·∫øt qu·∫£ build
            - name: Verify build
              run: |
                  echo "Built and pushed image: ${{ secrets.DOCKER_HUB_USERNAME }}/discordbot:${{ steps.docker_build.outputs.version }}"

    deploy:
        needs: build
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Deploy to VPS with Docker Compose
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.VPS_HOST }}
                  username: root
                  key: ${{ secrets.VPS_SSH_KEY }}
                  script: |
                      # Thi·∫øt l·∫≠p bi·∫øn
                      IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/discordbot:latest"
                      COMPOSE_FILE="/home/root/docker-compose.yml"
                      SERVICE_NAME="discordbot"
                      BACKUP_TAG=$(date +%Y%m%d_%H%M%S)
                      BACKUP_IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/discordbot-backup:${BACKUP_TAG}"

                      # Debug gi√° tr·ªã bi·∫øn
                      echo "IMAGE: $IMAGE"
                      echo "BACKUP_IMAGE: $BACKUP_IMAGE"
                      echo "COMPOSE_FILE: $COMPOSE_FILE"

                      # Ki·ªÉm tra file .env v√† docker-compose.yml
                      echo "üîç Checking required files..."
                      if [ ! -f "/home/root/config/.env" ]; then
                          echo "Error: .env file not found at /home/root/config/.env"
                          exit 1
                      fi
                      if [ ! -f "$COMPOSE_FILE" ]; then
                          echo "Error: docker-compose.yml not found at $COMPOSE_FILE"
                          exit 1
                      fi

                      # Pull image v·ªõi retry
                      echo "üîÑ Pulling latest Docker image..."
                      for i in {1..3}; do
                          docker-compose -f "$COMPOSE_FILE" pull "$SERVICE_NAME" && break
                          echo "Pull failed, retrying ($i/3)..."
                          sleep 5
                      done || {
                          echo "Error: Failed to pull $IMAGE after 3 attempts"
                          exit 1
                      }

                      # Backup container c≈©
                      echo "üì¶ Backing up old container ID..."
                      OLD_CONTAINER=$(docker ps -q -f name="$SERVICE_NAME")
                      if [ -n "$OLD_CONTAINER" ]; then
                          echo "Creating backup image: $BACKUP_IMAGE"
                          docker commit "$SERVICE_NAME" "$BACKUP_IMAGE" || {
                              echo "Warning: Failed to create backup image"
                          }
                      else
                          echo "No old container found to backup"
                      fi

                      # D·ª´ng container c≈© (n·∫øu c√≥)
                      echo "üõë Stopping old container..."
                      docker-compose -f "$COMPOSE_FILE" stop "$SERVICE_NAME" 2>/dev/null || true
                      docker-compose -f "$COMPOSE_FILE" rm -f "$SERVICE_NAME" 2>/dev/null || true

                      # Ch·∫°y container m·ªõi
                      echo "üöÄ Deploying with Docker Compose..."
                      docker-compose -f "$COMPOSE_FILE" up -d "$SERVICE_NAME" || {
                          echo "Error: Failed to start container"
                          if [ -n "$OLD_CONTAINER" ]; then
                              echo "‚è™ Rolling back to previous container..."
                              docker-compose -f "$COMPOSE_FILE" stop "$SERVICE_NAME" 2>/dev/null || true
                              docker-compose -f "$COMPOSE_FILE" rm -f "$SERVICE_NAME" 2>/dev/null || true
                              # Thay image b·∫±ng backup v√† ch·∫°y l·∫°i
                              sed -i "s|image:.*|image: $BACKUP_IMAGE|" "$COMPOSE_FILE"
                              docker-compose -f "$COMPOSE_FILE" up -d "$SERVICE_NAME" || {
                                  echo "Rollback failed"
                              }
                              # Kh√¥i ph·ª•c image g·ªëc trong compose file
                              sed -i "s|image:.*|image: $IMAGE|" "$COMPOSE_FILE"
                          fi
                          exit 1
                      }

                      # Ch·ªù v√† ki·ªÉm tra health
                      echo "‚è≥ Waiting for container to stabilize..."
                      sleep 10
                      STATUS=$(docker inspect "$SERVICE_NAME" --format '{{.State.Status}}' || echo "not_found")
                      if [ "$STATUS" != "running" ]; then
                          echo "Error: Container is not running (Status: $STATUS)"
                          exit 1
                      fi

                      # Ki·ªÉm tra logs
                      echo "üìú Checking Docker logs..."
                      docker-compose -f "$COMPOSE_FILE" logs --tail=50 "$SERVICE_NAME" || echo "‚ö†Ô∏è No logs available yet"

                      # Ki·ªÉm tra container
                      echo "üîç Checking running containers..."
                      docker ps -a

                      echo "üéØ Deployment completed successfully!"
